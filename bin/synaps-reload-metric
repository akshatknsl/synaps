#!/usr/bin/env python
# vim: tabstop=4 shiftwidth=4 softtabstop=4

# Copyright (c) 2012 Samsung SDS Co., LTD
# All Rights Reserved.
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

import pycassa
import os
import sys

possible_topdir = os.path.normpath(os.path.join(os.path.abspath(sys.argv[0]),
                                                os.pardir, os.pardir))
if os.path.exists(os.path.join(possible_topdir, "synaps", "__init__.py")):
    sys.path.insert(0, possible_topdir)

from synaps import flags
from synaps import log as logging
from synaps import utils
from synaps.db import Cassandra
from synaps.monitor import API
from synaps.context import get_admin_context
from pprint import pprint
import json


flags.FLAGS(sys.argv)
utils.default_flagfile()
logging.setup()
FLAGS = flags.FLAGS


def main():
    LOG = logging.getLogger()
    LOG.info("start to reload metrics")

    api = API()
    cass = Cassandra()
    metrics = []

    for k, v in cass.get_all_alarms():
        try:
            metric_key = v.get('metric_key')
            if metric_key in metrics:
                LOG.info('metric %s is already loaded', metric_key)
                continue
            
            LOG.info("reloading %s - %s:%s:%s:%s", 
                     v.get('alarm_name'), v.get('project_id'), 
                     v.get('namespace'), v.get('metric_name'), 
                     v.get('dimensions'))
    
            metrics.append(metric_key)
            dimensions = json.loads(v.get('dimensions')) \
                         if v.get('dimensions') else None
                         
            api.put_metric_data(get_admin_context(), 
                                project_id=v.get('project_id'), 
                                namespace=v.get('namespace'), 
                                metric_name=v.get('metric_name'),
                                dimensions=dimensions, value=None, unit=None, 
                                timestamp=utils.strtime(utils.utcnow()), 
                                is_admin=True)
                     
        except Exception as e:
            LOG.error("Unknown exception occoured %s" % str(e))
            LOG.error("error occurred while reloading metric - %s" % 
                      str(k))

    LOG.info("all metrics are reloaded")
if __name__ == "__main__":
    main()
